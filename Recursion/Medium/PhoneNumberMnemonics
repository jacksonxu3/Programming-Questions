# Phone Number Mnemonics

'''
Given a phone number, return all of the possble pnemonics
of that number. The letters that are associated with a number
are given in a table. 
'''

# Runtime of O(n * 4^n)
# Space Complexity of O(n * 4^n)
def phoneNumberMnemonics(phoneNumber):
    mnemonics = []
    curr_str = ["0"]*len(phoneNumber)
    helper(phoneNumber, curr_str, mnemonics, 0)
    return mnemonics

def helper(phoneNumber, curr_str, mnemonics, indx):
    # If we reach past the last digit, add the current pnemonic
    if indx == len(phoneNumber):
        mnemonics.append("".join(curr_str))
        return

    # Find the current digit we are at
    # and iterate over all of the letters mapped to it,
    # setting the current index to a letter and recursively
    # going to the next digit. 
    letters = dict[phoneNumber[indx]]
    for letter in letters:
        curr_str[indx] = letter
        helper(phoneNumber, curr_str, mnemonics, indx+1)

# Mapping of digits to letters
dict = {
    "0": ["0"],
    "1": ["1"],
    "2": ["a", "b", "c"],
    "3": ["d", "e", "f"],
    "4": ["g", "h", "i"],
    "5": ["j", "k", "l"],
    "6": ["m", "n", "o"],
    "7": ["p", "q", "r", "s"],
    "8": ["t", "u", "v"],
    "9": ["w", "x", "y", "z"],
}
