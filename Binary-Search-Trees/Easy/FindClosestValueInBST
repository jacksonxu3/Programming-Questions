# Find Closest Value In BST

'''
Write a function that takes in a BST and an integer value, that returns the closest value
to the given integer value that exists in the BST.
'''

# Runtime depends on shape of tree, 
# Between O(log n) and O(n)
def findClosestValueInBst(tree, target):
    curr_tree = tree
    closest = tree.value
    closest_diff = abs(closest - target)
    # Use iteration rather than recursion
    while curr_tree != None:
        # Keep track of the closest value
        if abs(curr_tree.value - target) < closest_diff:
            closest = curr_tree.value
            closest_diff = abs(closest - target)
        # if we are smaller than target, go right
        if curr_tree.value < target:
            curr_tree = curr_tree.right
        # if we are larger than target, go left
        else:
            curr_tree = curr_tree.left
    return closest

# This is the class of the input tree. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
