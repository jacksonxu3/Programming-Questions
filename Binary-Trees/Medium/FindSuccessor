# Find Successor

'''
Given a Binary Tree and a node, return the next node after the 
given node that would be traversed in a in-order traversal.
'''

# This is an input class. Do not edit.
class BinaryTree:
    def __init__(self, value, left=None, right=None, parent=None):
        self.value = value
        self.left = left
        self.right = right
        self.parent = parent

# Runtime of O(h), where h is the height of the tree
def findSuccessor(tree, node):
    # If a node has a right subtree, return the leftmost node in the right subtree
    if node.right is not None:
        curr_node = node.right
        while curr_node.left is not None:
            curr_node = curr_node.left
        return curr_node

    # If not, find the leftmost parent node of the node, and return its parent
    # because the upmost parent contains the entire leftmost parent node tree as
    # a left subtree
    else:
        curr_node = node
        if curr_node.parent == None:
            return None
        while curr_node.parent is not None and curr_node.parent.right == curr_node:
            curr_node = curr_node.parent
        return curr_node.parent
