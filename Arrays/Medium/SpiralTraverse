# Spiral Traverse

'''
Given a two-dimensional array, return an array that represents
a spiral traversal of the original array.
'''

# Runtime of O(n)
def spiralTraverse(array):
    toReturn = []

    row_start = 0
    row_end = len(array)-1
    col_start = 0
    col_end = len(array[0])-1

    # Split the iterations into rings of the matrix
    while (row_start <= row_end) and (col_start <= col_end):
        # For the one-by-one matrix case
        if (row_start == row_end) and (col_start == col_end):
            toReturn.append(array[row_start][col_start])
            break

        for top in range(col_start, col_end):
            toReturn.append(array[row_start][top])
            
        for right in range(row_start, row_end):
            toReturn.append(array[right][col_end])

        # Account for singular row and singular column matrixes
        # by avoiding duplicates. 
        for bottom in range(col_end, col_start, -1):
            if row_start == row_end:
                toReturn.append(array[row_start][col_end])
                break
            toReturn.append(array[row_end][bottom])
            
        for left in range(row_end, row_start, -1):
            if col_start == col_end:
                toReturn.append(array[row_end][col_end])
                break
            toReturn.append(array[left][col_start])

        row_start += 1
        row_end -= 1
        col_start += 1
        col_end -= 1

    return toReturn
